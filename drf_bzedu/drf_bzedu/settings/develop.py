"""
Django settings for drf_bzedu project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import datetime
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#ib34jcyti($066+lq-0ug5nq3i1u7@nq&6kua-e47q(si-(nj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'payoff',
    'order',
    'home',
    'user',
    'rest_framework',
    'corsheaders',
    'xadmin',
    'crispy_forms',
    'reversion',
    'course',
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器的上传模块
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'drf_bzedu.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drf_bzedu.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "db_mydata",
        'HOST': "127.0.0.1",
        'USER': "root",
        'PASSWORD': '159357',
        'PORT': 3306
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'









# 支付宝配置信息
ALIAPY_CONFIG = {
    "gateway_url": "https://openapi.alipaydev.com/gateway.do?",  # 沙箱支付宝网关地址
    "appid": "2016102600767552",
    "app_notify_url": None,
    "app_private_key_path": open(os.path.join(BASE_DIR, "apps/payoff/keys/app_private_key.pem")).read(),
    "alipay_public_key_path": open(os.path.join(BASE_DIR, "apps/payoff/keys/alipay_public_key.pem")).read(),
    "sign_type": "RSA2",
    "debug": False,
    "return_url": "http://localhost:8080/payoff/result",  # 同步回调地址
    "notify_url": "http://127.0.0.1:8000/payoff/result",  # 异步结果通知
}


# 富文本编辑器配置
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',	# 展示哪些工具栏
        'height': 300,	# 编辑器的高度
        # 'width': 300,
    },
}
CKEDITOR_UPLOAD_PATH = '' # 富文本编辑器上传图片路径


CACHES = {
    # 默认库
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 连接的redis所在服务的端口以及ip
        "LOCATION": "redis://127.0.0.1:6379/0",
        # 使用客户端的方式
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },

    # 验证码储存位置
    "sms_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 连接的redis所在服务的端口以及ip
        "LOCATION": "redis://127.0.0.1:6379/10",
        # 使用客户端的方式
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "sms_login": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 连接的redis所在服务的端口以及ip
        "LOCATION": "redis://127.0.0.1:6379/8",
        # 使用客户端的方式
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 购物车储存位置
    "shopping_cart": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 连接的redis所在服务的端口以及ip
        "LOCATION": "redis://127.0.0.1:6379/9",
        # 使用客户端的方式
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

#自定义多条件登录使用
AUTHENTICATION_BACKENDS = [
    'user.utils.UserAuth',
]

# jwt配置
JWT_AUTH = {
    # jwt有效时间
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=3600),
    # 自定义jwt返回值
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'user.utils.jwt_response',
}

#自定义用户模型
AUTH_USER_MODEL='user.MyUser'

# 修改默认的子应用的目录后，需要将apps的目录设置为全局的导包路径
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

CORS_ORIGIN_ALLOW_ALL = True

MEDIA_ROOT=os.path.join(BASE_DIR,'media/')

MEDIA_URL='/media/'
# drf全局配置
REST_FRAMEWORK={
    #全局异常配置
    'EXCEPTION_HANDLER':'utils.abnormal.exception_handler',#自定义全局异常
    # 认证方式
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ]
    #权限
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.AllowAny',
    # ],
    # #频率
    # 'DEFAULT_THROTTLE_CLASSES': [],
    # 'DEFAULT_CONTENT_NEGOTIATION_CLASS': 'rest_framework.negotiation.DefaultContentNegotiation',
    # 'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata',
    # 'DEFAULT_VERSIONING_CLASS': None,
    # # Throttling
    # 'DEFAULT_THROTTLE_RATES': {
    #     'user': '10/m',
    #     'anon': None,
    # },
}



# 项目的日志配置
LOGGING = {
    # 版本
    'version': 1,
    # 是否禁用已存在的日志器
    'disable_existing_loggers': False,
    # 格式化日志信息
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    # 日志的过滤信息
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理日志的方法
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            # 记录到文件中的日志等级
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置  日志的文件名  日志的保存目录
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/lesson_bzedu.log"),
            # 日志文件的大小  100M
            'maxBytes': 100 * 1024 * 1024,
            # 日志文件的最大数量
            'backupCount': 10,
            # 日志的格式
            'formatter': 'verbose'
        },
    },
    # 日志对象，与django集成使用
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'propagate': True,  # 是否让日志信息继续冒泡给其他的日志处理系统
        },
    },

}